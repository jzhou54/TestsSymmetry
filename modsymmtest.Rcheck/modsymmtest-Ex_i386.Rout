
R version 4.1.3 (2022-03-10) -- "One Push-Up"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: i386-w64-mingw32/i386 (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "modsymmtest"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> base::assign(".ExTimings", "modsymmtest-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('modsymmtest')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("mod.symm.test")
> ### * mod.symm.test
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mod.symm.test
> ### Title: Wilcoxon and Sign tests for symmetry about an unknown center
> ### Aliases: mod.symm.test
> 
> ### ** Examples
> 
> ## Not run: 
> ##D   # A study measures the plasma silicon levels before and after silicone implants surgery
> ##D   # in 30 women to evaluate the effect of the surgery. Informally speaking, we can be interested
> ##D   # in that there is an unknown constant shift such that the the plasma silicon level of post-surgery
> ##D   # can be explained completely based on that of pre-surgery. This can be stated as the null hypothesis
> ##D   # `H_0` The difference of plasma silicon level between post-surgery pre-surgery has a symmetric distribution
> ##D   # around a shift that is unknown.  
> ##D   data("plasma.silicon")
> ##D   post <- plasma.silicon$postoperative 
> ##D   pre <- plasma.silicon$preoperative
> ##D   # post <- c(0.21,0.24,0.1,0.12,0.28,0.25,0.22,0.21,0.22,0.23,0.22,0.24,0.45,0.38,
> ##D   #           0.23,0.22,0.18,0.15,0.04,0.14,0.24,0.2,0.24,0.18,0.19,0.15,0.26,0.3,0.22,0.24)
> ##D   # pre <- c(0.15,0.13,0.39,0.2,0.39,0.42,0.24,0.18,0.26,0.12,0.1,0.11,0.19, 0.15,0.27,
> ##D   #          0.28,0.11,0.11,0.18,0.18,0.24,0.48,0.27,0.22,0.18,0.19,0.32,0.31,0.19,0.21)
> ##D   mod.symm.test(x=post, y=pre, alternative ="two.sided", method = "wilcox")
> ##D   
> ##D   Result:
> ##D   Modified Wilcoxon signed-rank test
> ##D   data:  post and pre
> ##D   W = 238, p-value = 0.767
> ##D   alternative hypothesis: two.sided
> ##D   
> ##D   Interpretation:
> ##D   Test statistic `W` is the number of walsh average higher than sample mean, see more details 
> ##D   in paper authored by Vexler, etc. 
> ##D   p-value is 0.767, which implies there is no clue to reject the null hypothesis that
> ##D   the distribution of the difference of plasma silicon levels before and after 
> ##D   silicone implants surgery is symmetric. 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mod.symm.test", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("modsymmtest-package")
> ### * modsymmtest-package
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: modsymmtest-package
> ### Title: The modified Wilcoxon and Sign tests for symmetry about an
> ###   unknown center
> ### Aliases: modsymmtest-package
> ### Keywords: package
> 
> ### ** Examples
> 
>   ## Not run: 
> ##D     data("plasma.silicon")
> ##D     post <- plasma.silicon$postoperative 
> ##D     pre <- plasma.silicon$preoperative
> ##D     # post <- c(0.21,0.24,0.1,0.12,0.28,0.25,0.22,0.21,0.22,0.23,0.22,0.24,0.45,0.38,
> ##D     #           0.23,0.22,0.18,0.15,0.04,0.14,0.24,0.2,0.24,0.18,0.19,0.15,0.26,0.3,0.22,0.24)
> ##D     # pre <- c(0.15,0.13,0.39,0.2,0.39,0.42,0.24,0.18,0.26,0.12,0.1,0.11,0.19, 0.15,0.27,
> ##D     #          0.28,0.11,0.11,0.18,0.18,0.24,0.48,0.27,0.22,0.18,0.19,0.32,0.31,0.19,0.21)
> ##D     mod.symm.test(post, pre)
> ##D     
> ##D     
> ##D   
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("modsymmtest-package", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("n.symm.test")
> ### * n.symm.test
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: n.symm.test
> ### Title: Sample size determination for nonparametric tests of symmetry
> ###   when the center is unknown
> ### Aliases: n.symm.test
> 
> ### ** Examples
> 
> ## Not run: 
> ##D  data("plasma.silicon")
> ##D  post <- plasma.silicon$postoperative 
> ##D  pre <- plasma.silicon$preoperative
> ##D  diff <- post - pre
> ##D  n.symm.test(diff, sig.level = 0.05, power = 0.5, method = "wilcox", alternative ="two.sided" )
> ##D 
> ##D Result:
> ##D  Sample size calculation under wilcox procedure 
> ##D 
> ##D           N = 83
> ##D   sig.level = 0.05
> ##D       power = 0.5
> ##D        type = wilcox
> ##D alternative = two.sided
> ##D 
> ##D  Interpretation: 
> ##D  Given the pilot sample `diff` and significance level 0.05. The sample size needed is 83 to reach the 
> ##D  target power 0.5 under wilcoxon test procedure.
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("n.symm.test", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.33 0.03 0.39 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
